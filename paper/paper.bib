@misc{thompson2024openff,
  title = {{{OpenFF Interchange}}},
  author = {Thompson, Matthew and Wagner, Jeff and Gilmer, Justin B. and Timalsina, Umesh and Quach, Co D. and Boothroyd, Simon and Mitchell, Joshua A.},
  year = {2024},
  month = aug,
  doi = {10.5281/zenodo.13155316},
  urldate = {2024-08-07},
  abstract = {0.3.29 GROMACS export performance improements and bugfixes For the complete release notes, please see the release history. For help installing Interchange, the installation instructions. Please report bugs, request features, or ask questions through our issue tracker. Please note that there may still be some changes to the API prior to a stable 1.0.0 release.},
  howpublished = {Zenodo},
  file = {/Users/toni_brain/Zotero/storage/GAHP5Y64/13155316.html}
}

@article{jumper2021highly,
  title={Highly accurate protein structure prediction with AlphaFold},
  author={Jumper, John and Evans, Richard and Pritzel, Alexander and Green, Tim and Figurnov, Michael and Ronneberger, Olaf and Tunyasuvunakool, Kathryn and Bates, Russ and {\v{Z}}{\'\i}dek, Augustin and Potapenko, Anna and others},
  journal={nature},
  doi = {10.1038/s41586-021-03819-2},
  volume={596},
  number={7873},
  pages={583--589},
  year={2021},
  publisher={Nature Publishing Group}
}

@InProceedings{oliver_beckstein-proc-scipy-2016,
  author    = { {R}ichard {J}. {G}owers and {M}ax {L}inke and {J}onathan {B}arnoud and {T}yler {J}. {E}. {R}eddy and {M}anuel {N}. {M}elo and {S}ean {L}. {S}eyler and {J}an {D}omański and {D}avid {L}. {D}otson and {S}ébastien {B}uchoux and {I}an {M}. {K}enney and {O}liver {B}eckstein },
  title     = { {M}{D}{A}nalysis: {A} {P}ython {P}ackage for the {R}apid {A}nalysis of {M}olecular {D}ynamics {S}imulations },
  booktitle = { {P}roceedings of the 15th {P}ython in {S}cience {C}onference },
  pages     = { 98 - 105 },
  year      = { 2016 },
  editor    = { {S}ebastian {B}enthall and {S}cott {R}ostrup },
  doi       = { 10.25080/Majora-629e541a-00e }
}

@article{levitt1975computer,
  title = {Computer Simulation of Protein Folding},
  author = {Levitt, Michael and Warshel, Arieh},
  year = {1975},
  month = feb,
  journal = {Nature},
  volume = {253},
  number = {5494},
  pages = {694--698},
  publisher = {Nature Publishing Group},
  issn = {1476-4687},
  doi = {10.1038/253694a0},
  urldate = {2024-08-22},
  abstract = {A new and very simple representation of protein conformations has been used together with energy minimisation and thermalisation to simulate protein folding. Under certain conditions, the method succeeds in `renaturing' bovine pancreatic trypsin inhibitor from an open-chain conformation into a folded conformation close to that of the native molecule.},
  copyright = {1975 Springer Nature Limited},
  langid = {english},
  keywords = {Humanities and Social Sciences,multidisciplinary,Science}
}

@article{lindorff-larsen2011howa,
  title = {How {{Fast-Folding Proteins Fold}}},
  author = {{Lindorff-Larsen}, Kresten and Piana, Stefano and Dror, Ron O. and Shaw, David E.},
  year = {2011},
  month = oct,
  journal = {Science},
  volume = {334},
  number = {6055},
  pages = {517--520},
  publisher = {American Association for the Advancement of Science},
  doi = {10.1126/science.1208351},
  urldate = {2024-08-22},
  abstract = {An outstanding challenge in the field of molecular biology has been to understand the process by which proteins fold into their characteristic three-dimensional structures. Here, we report the results of atomic-level molecular dynamics simulations, over periods ranging between 100 {$\mu$}s and 1 ms, that reveal a set of common principles underlying the folding of 12 structurally diverse proteins. In simulations conducted with a single physics-based energy function, the proteins, representing all three major structural classes, spontaneously and repeatedly fold to their experimentally determined native structures. Early in the folding process, the protein backbone adopts a nativelike topology while certain secondary structure elements and a small number of nonlocal contacts form. In most cases, folding follows a single dominant route in which elements of the native structure appear in an order highly correlated with their propensity to form in the unfolded state.}
}

@article{engelberger2021developingb,
  title = {Developing and {{Implementing Cloud-Based Tutorials That Combine Bioinformatics Software}}, {{Interactive Coding}}, and {{Visualization Exercises}} for {{Distance Learning}} on {{Structural Bioinformatics}}},
  author = {Engelberger, Felipe and {Galaz-Davison}, Pablo and Bravo, Graciela and Rivera, Maira and {Ram{\'i}rez-Sarmiento}, C{\'e}sar A.},
  year = {2021},
  month = may,
  journal = {J. Chem. Educ.},
  volume = {98},
  number = {5},
  pages = {1801--1807},
  publisher = {American Chemical Society},
  issn = {0021-9584},
  doi = {10.1021/acs.jchemed.1c00022},
  urldate = {2024-08-22},
  abstract = {The COVID-19 pandemic has swiftly forced a change in learning strategies across educational institutions, from extensively relying on in-person activities toward online teaching. It is particularly difficult to adapt courses that depend on physical equipment to be now carried out remotely. This is the case for bioinformatics, which typically requires dedicated computer classrooms, as the logistics of granting remote access to a workstation or relying on the computational resources of each student is not trivial. A possible workaround is using cloud server-based computing resources, such as Google Colaboratory, a free web browser application that allows the writing and execution of Python programming through Jupyter notebooks, integrating text, images, and code cells. Following a cloud-based approach, we migrated the practical activities of a course on molecular modeling and simulation into the Google Colaboratory environment resulting in 12 tutorials that introduce students to topics such as phylogenetic analysis, molecular modeling, molecular docking, several flavors of molecular dynamics, and coevolutionary analysis. Each of these notebooks includes a brief introduction to the topic, software installation, execution of the required tools, and analysis of results, with each step properly described. Using a Likert scale questionnaire, a pool of students positively evaluated these tutorials in terms of the time required for their completion, their ability to understand the content and exercises developed in each session, and the practical significance and impact that these computational tools have on scientific research. All tutorials are freely available at https://github.com/pb3lab/ibm3202.},
  file = {/Users/toni_brain/Zotero/storage/Q7DNX2C6/Engelberger et al. - 2021 - Developing and Implementing Cloud-Based Tutorials .pdf}
}

@article{ciccotti2022molecular,
  title = {Molecular Simulations: Past, Present, and Future (a {{Topical Issue}} in {{EPJB}})},
  shorttitle = {Molecular Simulations},
  author = {Ciccotti, G. and Dellago, C. and Ferrario, M. and Hern{\'a}ndez, E. R. and Tuckerman, M. E.},
  year = {2022},
  month = jan,
  journal = {Eur. Phys. J. B},
  volume = {95},
  number = {1},
  pages = {3},
  issn = {1434-6036},
  doi = {10.1140/epjb/s10051-021-00249-x},
  urldate = {2024-08-22},
  langid = {english},
  file = {/Users/toni_brain/Zotero/storage/D7H43BJJ/Ciccotti et al. - 2022 - Molecular simulations past, present, and future (.pdf}
}

@article{hollingsworth2018molecular,
  title = {Molecular {{Dynamics Simulation}} for {{All}}},
  author = {Hollingsworth, Scott A. and Dror, Ron O.},
  year = {2018},
  month = sep,
  journal = {Neuron},
  volume = {99},
  number = {6},
  pages = {1129--1143},
  publisher = {Elsevier},
  issn = {0896-6273},
  doi = {10.1016/j.neuron.2018.08.011},
  urldate = {2024-08-22},
  langid = {english},
  pmid = {30236283},
  keywords = {allostery,biomolecular simulation,conformational change,drug design,drug discovery,experimental design,MD simulations,protein,structural biology},
  file = {/Users/toni_brain/Zotero/storage/FP552XVR/Hollingsworth and Dror - 2018 - Molecular Dynamics Simulation for All.pdf}
}

@article{alibay2023building,
  title = {Building a Community-Driven Ecosystem for Fast, Reproducible, and Reusable Molecular Simulation Analysis Using Mdanalysis},
  author = {Alibay, Irfan and Barnoud, Jonathan and Beckstein, Oliver and Gowers, Richard J. and Loche, Philip R. and {MacDermott-Opeskin}, Hugo and Matta, Micaela and Naughton, Fiona B. and Reddy, Tyler and Wang, Lily},
  year = {2023},
  month = feb,
  journal = {Biophysical Journal},
  volume = {122},
  number = {3},
  pages = {420a},
  publisher = {Elsevier},
  issn = {0006-3495},
  doi = {10.1016/j.bpj.2022.11.2277},
  urldate = {2024-08-22},
  langid = {english},
  file = {/Users/toni_brain/Zotero/storage/BHBHKCP8/Alibay et al. - 2023 - Building a community-driven ecosystem for fast, re.pdf}
}

@article{michaud-agrawal2011mdanalysis,
  title = {{{MDAnalysis}}: {{A}} Toolkit for the Analysis of Molecular Dynamics Simulations},
  shorttitle = {{{MDAnalysis}}},
  author = {{Michaud-Agrawal}, Naveen and Denning, Elizabeth J. and Woolf, Thomas B. and Beckstein, Oliver},
  year = {2011},
  journal = {Journal of Computational Chemistry},
  volume = {32},
  number = {10},
  pages = {2319--2327},
  issn = {1096-987X},
  doi = {10.1002/jcc.21787},
  urldate = {2024-08-22},
  abstract = {MDAnalysis is an object-oriented library for structural and temporal analysis of molecular dynamics (MD) simulation trajectories and individual protein structures. It is written in the Python language with some performance-critical code in C. It uses the powerful NumPy package to expose trajectory data as fast and efficient NumPy arrays. It has been tested on systems of millions of particles. Many common file formats of simulation packages including CHARMM, Gromacs, Amber, and NAMD and the Protein Data Bank format can be read and written. Atoms can be selected with a syntax similar to CHARMM's powerful selection commands. MDAnalysis enables both novice and experienced programmers to rapidly write their own analytical tools and access data stored in trajectories in an easily accessible manner that facilitates interactive explorative analysis. MDAnalysis has been tested on and works for most Unix-based platforms such as Linux and Mac OS X. It is freely available under the GNU General Public License from http://mdanalysis.googlecode.com. {\copyright} 2011 Wiley Periodicals, Inc. J Comput Chem 2011},
  copyright = {Copyright {\copyright} 2011 Wiley Periodicals, Inc.},
  langid = {english},
  keywords = {analysis,membrane systems,molecular dynamics simulations,object-oriented design,proteins,Python programming language,software},
  file = {/Users/toni_brain/Zotero/storage/8FBCZC37/Michaud-Agrawal et al. - 2011 - MDAnalysis A toolkit for the analysis of molecula.pdf;/Users/toni_brain/Zotero/storage/XH6AXMAY/jcc.html}
}

@article{pedregosa2011scikitlearn,
  title = {Scikit-Learn: {{Machine Learning}} in {{Python}}},
  shorttitle = {Scikit-Learn},
  author = {Pedregosa, Fabian and Varoquaux, Ga{\"e}l and Gramfort, Alexandre and Michel, Vincent and Thirion, Bertrand and Grisel, Olivier and Blondel, Mathieu and Prettenhofer, Peter and Weiss, Ron and Dubourg, Vincent and Vanderplas, Jake and Passos, Alexandre and Cournapeau, David and Brucher, Matthieu and Perrot, Matthieu and Duchesnay, {\'E}douard},
  year = {2011},
  journal = {Journal of Machine Learning Research},
  volume = {12},
  number = {85},
  pages = {2825--2830},
  issn = {1533-7928},
  urldate = {2024-08-22},
  abstract = {Scikit-learn is a Python module integrating a wide range of state-of-the-art machine learning algorithms for medium-scale supervised and unsupervised problems. This package focuses on bringing machine learning to non-specialists using a general-purpose high-level language.  Emphasis is put on ease of use, performance, documentation, and API consistency.  It has minimal dependencies and is distributed under the simplified BSD license, encouraging its use in both academic and commercial settings.  Source code, binaries, and documentation can be downloaded from http://scikit-learn.sourceforge.net.},
  file = {/Users/toni_brain/Zotero/storage/CZAWDZJI/Pedregosa et al. - 2011 - Scikit-learn Machine Learning in Python.pdf;/Users/toni_brain/Zotero/storage/EEVRH94Z/scikit-learn.html}
}
